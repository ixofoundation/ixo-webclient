/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.26.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Duration, PercentageThreshold, Uint64, Choice, Coin, Config, Addr, InfoResponse, ProposalResponse, } from "./DaoProposalCondorcet.types";
import { BaseClient, DeliverTxResponse, ExecuteProps } from "./Base.client";
export interface DaoProposalCondorcetReadOnlyInterface {
  contractAddress: string;
  proposal: ({
    id
  }: {
    id: number;
  }) => Promise<ProposalResponse>;
  config: () => Promise<Config>;
  dao: () => Promise<Addr>;
  info: () => Promise<InfoResponse>;
  nextProposalId: () => Promise<Uint64>;
}

export interface DaoProposalCondorcetInterface extends DaoProposalCondorcetReadOnlyInterface {
  contractAddress: string;
  sender: string;
  propose: ({
    choices
  }: {
    choices: Choice[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  vote: ({
    proposalId,
    vote
  }: {
    proposalId: number;
    vote: number[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  execute: ({
    proposalId
  }: {
    proposalId: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  close: ({
    proposalId
  }: {
    proposalId: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  setConfig: ({
    closeProposalsOnExecutionFailure,
    minVotingPeriod,
    quorum,
    votingPeriod
  }: {
    closeProposalsOnExecutionFailure: boolean;
    minVotingPeriod?: Duration;
    quorum: PercentageThreshold;
    votingPeriod: Duration;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class DaoProposalCondorcetClient extends BaseClient {
  sender: string;
  contractAddress: string;

  constructor(execute: any, sender: string, contractAddress: string) {
    super(execute);
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.propose = this.propose.bind(this);
    this.vote = this.vote.bind(this);
    this.execute = this.execute.bind(this);
    this.close = this.close.bind(this);
    this.setConfig = this.setConfig.bind(this);
  }

  propose = async ({
    choices,
    transactionConfig
  }: {
    choices: Choice[];
    transactionConfig: ExecuteProps["transactionConfig"]
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<DeliverTxResponse> => {
    return await super.execute(this.sender, this.contractAddress, {
      propose: {
        choices
      }
    }, fee, memo, funds, transactionConfig);
  };
  vote = async ({
    proposalId,
    vote,
    transactionConfig
  }: {
    proposalId: number;
    vote: number[];
    transactionConfig: ExecuteProps["transactionConfig"]
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<DeliverTxResponse> => {
    return await super.execute(this.sender, this.contractAddress, {
      vote: {
        proposal_id: proposalId,
        vote
      }
    }, fee, memo, funds, transactionConfig);
  };
  executeProposal = async ({
    proposalId,
    transactionConfig
  }: {
    proposalId: number;
    transactionConfig: ExecuteProps["transactionConfig"]
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<DeliverTxResponse> => {
    return await super.execute(this.sender, this.contractAddress, {
      execute: {
        proposal_id: proposalId
      }
    }, fee, memo, funds, transactionConfig);
  };
  close = async ({
    proposalId,
    transactionConfig
  }: {
    proposalId: number;
    transactionConfig: ExecuteProps["transactionConfig"]
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<DeliverTxResponse> => {
    return await super.execute(this.sender, this.contractAddress, {
      close: {
        proposal_id: proposalId
      }
    }, fee, memo, funds, transactionConfig);
  };
  setConfig = async ({
    closeProposalsOnExecutionFailure,
    minVotingPeriod,
    quorum,
    votingPeriod,
    transactionConfig
  }: {
    closeProposalsOnExecutionFailure: boolean;
    minVotingPeriod?: Duration;
    quorum: PercentageThreshold;
    votingPeriod: Duration;
    transactionConfig: ExecuteProps["transactionConfig"]
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<DeliverTxResponse> => {
    return await super.execute(this.sender, this.contractAddress, {
      set_config: {
        close_proposals_on_execution_failure: closeProposalsOnExecutionFailure,
        min_voting_period: minVotingPeriod,
        quorum,
        voting_period: votingPeriod
      }
    }, fee, memo, funds, transactionConfig);
  };
}